package com.matcos.app2;

import androidx.appcompat.app.ActionBar;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.NotificationCompat;

import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Bundle;
import android.provider.Settings;
import android.util.Log;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Toast;

import com.matcos.app2.core.notify.IMyNoticeListener;
import com.matcos.app2.core.notify.NotificationService;
import com.matcos.app2.core.service.DlAccessibilityService;
import com.matcos.app2.core.service.WindowPopup;
import com.matcos.app2.databinding.ActivityMainBinding;

import java.util.List;

public class MainActivity extends AppCompatActivity implements IMyNoticeListener {
    String TAG = "MainActivity";
    private ActivityMainBinding activityMainBinding;
    private WindowPopup mWindowPopup;
    public static final String NOTIFICATION_CHANNEL_ID = "10001" ;
    private final static String default_notification_channel_id = "default" ;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        ActionBar actionBar = getSupportActionBar();
        actionBar.hide();
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
            getWindow().getAttributes().layoutInDisplayCutoutMode = WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES;
        }
        activityMainBinding = ActivityMainBinding.inflate(getLayoutInflater());
        View viewMain = activityMainBinding.getRoot();
        setContentView(viewMain);

        requestEnableAccesibility();
        new NotificationService().setListener(this);
        activityMainBinding.btnTop.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                changeYPos(-10);
            }
        });
        activityMainBinding.btnBottom.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                changeYPos(10);
            }
        });

        activityMainBinding.btnRequestPermissionNoti.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent("android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS" ) ;
                startActivity(intent) ;
            }
        });

        activityMainBinding.btnCreateNoti.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                NotificationManager mNotificationManager = (NotificationManager) getSystemService( NOTIFICATION_SERVICE ) ;
                NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(MainActivity.this, default_notification_channel_id ) ;
                mBuilder.setContentTitle( "My Notification" ) ;
                mBuilder.setContentText( "Notification Listener Service Example" ) ;
                mBuilder.setTicker( "Notification Listener Service Example" ) ;
                mBuilder.setSmallIcon(R.drawable. ic_launcher_foreground ) ;
                mBuilder.setAutoCancel( true ) ;
                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O ) {
                    int importance = NotificationManager.IMPORTANCE_HIGH ;
                    NotificationChannel notificationChannel = new NotificationChannel( NOTIFICATION_CHANNEL_ID , "NOTIFICATION_CHANNEL_NAME" , importance) ;
                    mBuilder.setChannelId( NOTIFICATION_CHANNEL_ID ) ;
                    assert mNotificationManager != null;
                    mNotificationManager.createNotificationChannel(notificationChannel) ;
                }
                assert mNotificationManager != null;
                mNotificationManager.notify(( int ) System. currentTimeMillis () , mBuilder.build()) ;
            }
        });
    }

    private void changeYPos(int val) {
        mWindowPopup = WindowPopup.getInstance(this);
        if(mWindowPopup != null) {
            mWindowPopup.changeY(val);
        }
    }

    private void requestEnableAccesibility() {
        if(isAccessibilityServiceEnabled(this, DlAccessibilityService.class)) {
            Toast.makeText(this, "service is enabled", Toast.LENGTH_SHORT).show();
        } else {
            Toast.makeText(this, "service isn't enabled", Toast.LENGTH_SHORT).show();
            checkOverlayPermission();
        }
    }

    // method to ask user to grant the Overlay permission
    public void checkOverlayPermission(){
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if (!Settings.canDrawOverlays(this)) {
                Intent myIntent = new Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS);
                startActivity(myIntent);
            }
        }
    }

    public static boolean isAccessibilityServiceEnabled(Context context, Class accessibilityService) {
        String prefStr = Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES);
        return prefStr != null && prefStr.contains(context.getPackageName()+"/"+accessibilityService.getName());
    }

    @Override
    protected void onResume() {
        super.onResume();
        test();
    }

    public void test() {
        final PackageManager pm = getPackageManager();
        List<ApplicationInfo> packages = pm.getInstalledApplications(PackageManager.GET_META_DATA);
        for (ApplicationInfo packageInfo : packages) {
            Log.d(TAG, "Installed package :" + packageInfo.packageName);
        }
    }
    @Override
    protected void onDestroy() {
        super.onDestroy();
    }

    @Override
    public void setValue(String packageName) {
        activityMainBinding.txtValuetest.append( " \n " + packageName) ;
        mWindowPopup.getInstance(this).updateValueContent(packageName);
    }
}
